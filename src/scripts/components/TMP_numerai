{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8091848,"sourceType":"datasetVersion","datasetId":4678573}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Numerai Base Models","metadata":{}},{"cell_type":"code","source":"%pip install numerapi numerai_tools mlflow","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:52:54.828780Z","iopub.execute_input":"2024-10-04T04:52:54.829563Z","iopub.status.idle":"2024-10-04T04:53:22.435878Z","shell.execute_reply.started":"2024-10-04T04:52:54.829525Z","shell.execute_reply":"2024-10-04T04:53:22.434641Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os, shutil, csv, mlflow, json\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom numerapi import NumerAPI\nfrom numerai_tools.scoring import numerai_corr, correlation_contribution\nfrom sklearn.model_selection import ParameterGrid","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:22.438116Z","iopub.execute_input":"2024-10-04T04:53:22.438930Z","iopub.status.idle":"2024-10-04T04:53:28.994543Z","shell.execute_reply.started":"2024-10-04T04:53:22.438876Z","shell.execute_reply":"2024-10-04T04:53:28.993731Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## CONFIG","metadata":{}},{"cell_type":"code","source":"%env USER_NAME=domreichl\n%env REPO_NAME=numerai\n%env MLFLOW_ARTIFACT_LOCATION=s3://numerai/mlruns\n%env MLFLOW_S3_ENDPOINT_URL=https://dagshub.com/api/v1/repo-buckets/s3/domreichl\n%env MLFLOW_TRACKING_URI=https://dagshub.com/domreichl/numerai.mlflow\n%env MLFLOW_TRACKING_USERNAME=domreichl\n%env MLFLOW_TRACKING_PASSWORD=2a81963a7410b7a023f4e7217b77f910b64fb218\n%env MLFLOW_TRACKING_TOKEN=2a81963a7410b7a023f4e7217b77f910b64fb218\n%env AWS_ACCESS_KEY_ID=2a81963a7410b7a023f4e7217b77f910b64fb218\n%env AWS_SECRET_ACCESS_KEY=2a81963a7410b7a023f4e7217b77f910b64fb218\nmlflow.set_tracking_uri(os.environ.get(\"MLFLOW_TRACKING_URI\"))","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:41.291680Z","iopub.execute_input":"2024-10-04T04:53:41.292548Z","iopub.status.idle":"2024-10-04T04:53:41.318788Z","shell.execute_reply.started":"2024-10-04T04:53:41.292506Z","shell.execute_reply":"2024-10-04T04:53:41.317874Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"FOLDER = \"/kaggle/working\"\nDATA_VERSION = \"v5.0\"\nMAIN_TARGET = \"target_cyrus_v4_20\"\nDATA_DIR = Path(os.path.join(FOLDER, DATA_VERSION))\nMODELS_DIR = Path(os.path.join(FOLDER, \"models_241003\"))","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:41.712570Z","iopub.execute_input":"2024-10-04T04:53:41.712939Z","iopub.status.idle":"2024-10-04T04:53:41.718041Z","shell.execute_reply.started":"2024-10-04T04:53:41.712906Z","shell.execute_reply":"2024-10-04T04:53:41.717025Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## FILES","metadata":{}},{"cell_type":"code","source":"def cleanup():\n    for fn in os.listdir(FOLDER):\n        path = os.path.join(FOLDER, fn)\n        if os.path.isfile(path):\n            os.remove(path)\n        elif DATA_VERSION not in path:\n            shutil.rmtree(path)\n\n#cleanup()\nMODELS_DIR.mkdir(exist_ok=True)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-04T04:53:42.471536Z","iopub.execute_input":"2024-10-04T04:53:42.472285Z","iopub.status.idle":"2024-10-04T04:53:42.477599Z","shell.execute_reply.started":"2024-10-04T04:53:42.472245Z","shell.execute_reply":"2024-10-04T04:53:42.476622Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def download_data():\n    napi = NumerAPI()\n    for file in [\"features.json\", \"train.parquet\", \"validation.parquet\"]:\n        filename = DATA_VERSION + \"/\" + file\n        print(f\"Downloading {filename}\")\n        napi.download_dataset(filename)\n        \n#download_data()","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:42.726288Z","iopub.execute_input":"2024-10-04T04:53:42.727019Z","iopub.status.idle":"2024-10-04T04:53:42.731833Z","shell.execute_reply.started":"2024-10-04T04:53:42.726982Z","shell.execute_reply":"2024-10-04T04:53:42.730868Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## utils/evaluation.py","metadata":{}},{"cell_type":"code","source":"from numerai_tools.scoring import numerai_corr, correlation_contribution\n\n\ndef evaluate_predictions(y: pd.DataFrame) -> dict:\n    per_era_corr = y.groupby(\"era\").apply(\n        lambda era: numerai_corr(era[[\"prediction\"]], era[\"target\"])\n    )\n#     per_era_mmc = y.groupby(\"era\").apply(\n#         lambda era: correlation_contribution(\n#             era[[\"prediction\"]], era[\"numerai_meta_model\"], era[\"target\"]\n#         )\n#     )\n    corr_mean = per_era_corr.mean().iloc[0]\n    corr_std = per_era_corr.std().iloc[0]\n    corr_max_drawdown = (\n        (per_era_corr.cumsum().expanding(min_periods=1).max() - per_era_corr.cumsum())\n        .max()\n        .iloc[0]\n    )\n#     mmc_mean = per_era_mmc.mean().iloc[0]\n#     mmc_std = per_era_mmc.std().iloc[0]\n#     mmc_max_drawdown = (\n#         (per_era_mmc.cumsum().expanding(min_periods=1).max() - per_era_mmc.cumsum())\n#         .max()\n#         .iloc[0]\n#     )\n#     score = 0.5 * corr_mean + 2.0 * mmc_mean\n    metrics = {\n        \"pred_std\": y[\"prediction\"].std(),\n        \"corr_mean\": corr_mean,\n        \"corr_std\": corr_std,\n        \"corr_sharpe\": corr_mean / corr_std,\n        \"corr_max_drawdown\": corr_max_drawdown,\n#         \"mmc_mean\": mmc_mean,\n#         \"mmc_std\": mmc_std,\n#         \"mmc_sharpe\": mmc_mean / mmc_std,\n#         \"mmc_max_drawdown\": mmc_max_drawdown,\n#         \"score\": score,\n    }\n    return {k: round(float(v), 5) for k, v in metrics.items()}\n","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:43.189762Z","iopub.execute_input":"2024-10-04T04:53:43.190617Z","iopub.status.idle":"2024-10-04T04:53:43.198524Z","shell.execute_reply.started":"2024-10-04T04:53:43.190578Z","shell.execute_reply":"2024-10-04T04:53:43.197553Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## utils/mlflow_utils.py","metadata":{}},{"cell_type":"code","source":"import dotenv, mlflow, os\nfrom pathlib import Path\n\n\ndef set_tracking_uri(dotenv_path: Path):\n    dotenv.load_dotenv(dotenv_path)\n    mlflow.set_tracking_uri(os.environ.get(\"MLFLOW_TRACKING_URI\"))\n\n\ndef get_or_create_experiment(experiment_name: str) -> str:\n    if experiment := mlflow.get_experiment_by_name(experiment_name):\n        print(f\"Loaded experiment '{experiment_name}'\")\n        return experiment.experiment_id\n    else:\n        print(f\"Created new experiment '{experiment_name}'\")\n        return mlflow.create_experiment(\n            experiment_name, os.environ.get(\"MLFLOW_ARTIFACT_LOCATION\")\n        )\n\n\ndef fetch_latest_run_id(experiment_name: str) -> str:\n    experiment_id = mlflow.get_experiment_by_name(experiment_name).experiment_id\n    runs = mlflow.search_runs(\n        experiment_ids=[experiment_id], order_by=[\"start_time DESC\"], max_results=1\n    )\n    if runs.empty:\n        raise Exception(f\"No runs found for experiment '{experiment_name}'\")\n    latest_run_id = runs.iloc[0][\"run_id\"]\n    print(f\"Latest run ID: {latest_run_id}\")\n    return latest_run_id\n\n\ndef get_run_arg(experiment_name: str, run_name: str) -> str | None:\n    runs = mlflow.search_runs(\n        experiment_ids=[get_or_create_experiment(experiment_name)]\n    )\n    if len(runs) == 0:\n        print(f\"Creating new run '{run_name}'\")\n        return {\"run_name\": run_name}\n    run_ids = runs[runs[\"tags.mlflow.runName\"] == run_name][\"run_id\"].tolist()\n    if len(run_ids) == 0:\n        print(f\"Creating new run '{run_name}'\")\n        return {\"run_name\": run_name}\n    elif len(run_ids) > 1:\n        raise Exception(f\"Found {len(run_ids)} run IDs with name '{run_name}'\")\n    else:\n        print(f\"Appending to existing run '{run_name}'\")\n        return {\"run_id\": run_ids[0]}\n","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:44.151919Z","iopub.execute_input":"2024-10-04T04:53:44.152280Z","iopub.status.idle":"2024-10-04T04:53:44.180649Z","shell.execute_reply.started":"2024-10-04T04:53:44.152247Z","shell.execute_reply":"2024-10-04T04:53:44.179513Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## utils/data.py","metadata":{}},{"cell_type":"code","source":"def load_parquet(\n    data_dir: Path, file_name: str, features: list[str], targets: list[str]\n) -> pd.DataFrame:\n    columns = [\"era\", \"data_type\"] + features + targets\n    print(f\"Loading '{file_name}' with {len(columns)} columns\")\n    df = pd.read_parquet(data_dir / file_name, columns=columns)\n    df = df[df[\"data_type\"] != \"test\"]\n    del df[\"data_type\"]\n    return df\n\n\ndef load_full_data(\n    data_dir: Path, features: list[str], targets: list[str]\n) -> pd.DataFrame:\n    df = pd.concat(\n        [\n            load_parquet(data_dir, fn, features, targets)\n            #for fn in [\"train_int8.parquet\", \"validation_int8.parquet\"]\n            for fn in [\"train.parquet\", \"validation.parquet\"]\n        ]\n    )\n    df = impute_missing(df)\n    #df = df.join(load_numerai_meta_model(data_dir)).reset_index()\n    return df\n\n\ndef split_train_test(df: pd.DataFrame, eras_to_embargo: int = 4) -> tuple:\n    eras = list(df[\"era\"].unique())\n    split = int(len(eras) * 0.9)\n    train = df[df[\"era\"].isin(eras[:split])]\n    test = df[df[\"era\"].isin(eras[split + eras_to_embargo :])]\n    return train, test\n\n\ndef split_x_y(df: pd.DataFrame) -> tuple:\n    df = df.reset_index()\n    x = df[[col for col in df.columns if col.startswith(\"feature\")]]\n    y = df[\n        #[\"id\", \"era\", \"numerai_meta_model\"]\n        [\"id\", \"era\"]\n        + [col for col in df.columns if col.startswith(\"target\")]\n    ]\n    return x, y\n\n\ndef impute_missing(df: pd.DataFrame) -> pd.DataFrame:\n    for col in df.columns:\n        nans = df[df[col].isna()]\n        if len(nans) > 0:\n            if col.startswith(\"target\"):\n                mode = float(df[col].mode().iloc[0])\n                print(f\"Imputing {len(nans)} NaNs in {col} with {mode} (mode)\")\n                df[col] = df[col].fillna(mode)\n            else:\n                raise Exception(f\"{col} contains NaNs\")\n    return df\n\n\n# def load_numerai_meta_model(data_dir: Path) -> pd.DataFrame:\n#     return pd.read_parquet(data_dir / \"meta_model.parquet\")[\"numerai_meta_model\"]\n\n\ndef split_eras(data_dir: Path, skip_n_eras: int) -> tuple[list[str]]:\n    df = load_full_data(data_dir, [], [])\n    train, test = split_train_test(df)\n    train = drop_n_eras(train, skip_n_eras)\n    print(\n        f\"Eras split into {train['era'].nunique()} train and {test['era'].nunique()} test\"\n    )\n    return train[\"era\"].unique().tolist(), test[\"era\"].unique().tolist()\n\n\ndef drop_n_eras(df: pd.DataFrame, n: int) -> pd.DataFrame:\n    print(f\"Skipping {n} eras\")\n    eras_to_keep = list(df[\"era\"].unique())[n:]\n    return df[df[\"era\"].isin(eras_to_keep)]\n\ndef get_era_range(df: pd.DataFrame) -> str:\n    return f\"{str(df['era'].min()).zfill(4)}-{str(df['era'].max()).zfill(4)}\"\n","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:45.048338Z","iopub.execute_input":"2024-10-04T04:53:45.049198Z","iopub.status.idle":"2024-10-04T04:53:45.066143Z","shell.execute_reply.started":"2024-10-04T04:53:45.049157Z","shell.execute_reply":"2024-10-04T04:53:45.065172Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load Data","metadata":{}},{"cell_type":"code","source":"FEATURE_SET = \"autoenc\" # {medium, shatteredx, autoenc}","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:46.232303Z","iopub.execute_input":"2024-10-04T04:53:46.233196Z","iopub.status.idle":"2024-10-04T04:53:46.237286Z","shell.execute_reply.started":"2024-10-04T04:53:46.233152Z","shell.execute_reply":"2024-10-04T04:53:46.236378Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with open(DATA_DIR / \"features.json\") as feature_file:\n    feature_metadata = json.load(feature_file)\nall_targets = feature_metadata[\"targets\"]\nlen(all_targets)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:46.507675Z","iopub.execute_input":"2024-10-04T04:53:46.508410Z","iopub.status.idle":"2024-10-04T04:53:46.521495Z","shell.execute_reply.started":"2024-10-04T04:53:46.508371Z","shell.execute_reply":"2024-10-04T04:53:46.520595Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"targets = [t for t in all_targets if t.endswith(\"_20\")]\ntargets","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:46.747351Z","iopub.execute_input":"2024-10-04T04:53:46.747746Z","iopub.status.idle":"2024-10-04T04:53:46.754422Z","shell.execute_reply.started":"2024-10-04T04:53:46.747710Z","shell.execute_reply":"2024-10-04T04:53:46.753576Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"if FEATURE_SET == \"autoenc\":\n    ARTIFACT_DIR = FOLDER + \"/artifacts\"\n    RUN_ID = \"0bba743675f544ff8965ebcc56e44a96\"\n    print(mlflow.artifacts.list_artifacts(run_id=RUN_ID))\n#     mlflow.artifacts.download_artifacts(run_id=RUN_ID, artifact_path=\"autoenc_zerocols.txt\", dst_path=FOLDER+\"/artifacts\")\n#     mlflow.artifacts.download_artifacts(run_id=RUN_ID, artifact_path=\"autoenc.parquet\", dst_path=FOLDER+\"/artifacts\")\n    x = pd.read_parquet(ARTIFACT_DIR + \"/autoenc.parquet\")\n    y = load_full_data(DATA_DIR, [], targets)\nelif FEATURE_SET == \"shatteredx\":\n    features = pd.read_csv(\"/kaggle/input/numerai-domreichl/features_shatteredx.csv\", header=None)[0].tolist()\n    x, y = split_x_y(load_full_data(DATA_DIR, features, targets))\n    x[\"era\"] = y[\"era\"].copy()\nelif FEATURE_SET in [\"small\", \"medium\", \"all\"]:\n    features = feature_metadata[\"feature_sets\"][FEATURE_SET]\n    x, y = split_x_y(load_full_data(DATA_DIR, features, targets))\n    x[\"era\"] = y[\"era\"].copy()\nelif FEATURE_SET == \"medium500\":\n    features_rand500 = random.sample(feature_metadata[\"feature_sets\"][\"medium\"], 500)\n    pd.DataFrame({\"MediumFeaturesRand500\": features_rand500}).to_csv(os.path.join(DATA_DIR, \"medium_rand500.csv\"), index=False)\n    x, y = split_x_y(load_full_data(DATA_DIR, features_rand500, targets))\n    x[\"era\"] = y[\"era\"].copy()\nelse:\n    raise Exception(\"Not implemented.\")","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:53:49.542354Z","iopub.execute_input":"2024-10-04T04:53:49.543337Z","iopub.status.idle":"2024-10-04T04:54:11.052301Z","shell.execute_reply.started":"2024-10-04T04:53:49.543290Z","shell.execute_reply":"2024-10-04T04:54:11.051193Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:11.054434Z","iopub.execute_input":"2024-10-04T04:54:11.055343Z","iopub.status.idle":"2024-10-04T04:54:13.607615Z","shell.execute_reply.started":"2024-10-04T04:54:11.055292Z","shell.execute_reply":"2024-10-04T04:54:13.606660Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:13.609232Z","iopub.execute_input":"2024-10-04T04:54:13.609613Z","iopub.status.idle":"2024-10-04T04:54:13.644304Z","shell.execute_reply.started":"2024-10-04T04:54:13.609570Z","shell.execute_reply":"2024-10-04T04:54:13.643232Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y = y[y[\"era\"].isin(x[\"era\"])]","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:13.646297Z","iopub.execute_input":"2024-10-04T04:54:13.646638Z","iopub.status.idle":"2024-10-04T04:54:14.659615Z","shell.execute_reply.started":"2024-10-04T04:54:13.646598Z","shell.execute_reply":"2024-10-04T04:54:14.658624Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train, x_test = split_train_test(x)\ny_train, y_test = split_train_test(y)\nlen(x_train), len(y_train), len(x_test), len(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:14.660887Z","iopub.execute_input":"2024-10-04T04:54:14.661204Z","iopub.status.idle":"2024-10-04T04:54:23.434550Z","shell.execute_reply.started":"2024-10-04T04:54:14.661172Z","shell.execute_reply":"2024-10-04T04:54:23.433595Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#del x, y","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:23.435591Z","iopub.execute_input":"2024-10-04T04:54:23.435899Z","iopub.status.idle":"2024-10-04T04:54:23.439876Z","shell.execute_reply.started":"2024-10-04T04:54:23.435867Z","shell.execute_reply":"2024-10-04T04:54:23.438935Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# LIGHTGBM","metadata":{}},{"cell_type":"markdown","source":"## (0/1) Utils","metadata":{}},{"cell_type":"code","source":"def fit_predict_eval_lightgbm(x_train, y_train, x_test, y_test, hparams):\n    model, preds = fit_predict_lightgbm(x_train, y_train, x_test, hparams)\n    metrics =  evaluate_predictions(y_test.assign(prediction=preds))\n    return model, preds, metrics\n\ndef fit_predict_lightgbm(x_train, y_train, x_test, hparams):\n    model = fit_lightgbm(x_train, y_train, hparams)\n    preds = model.predict(x_test.drop(columns=[\"era\"]))\n    return model, preds\n    \ndef fit_lightgbm(x_train, y_train, hparams):\n    x = drop_n_eras(x_train, hparams[\"skip_n_eras\"]).drop(columns=[\"era\"])\n    y = drop_n_eras(y_train, hparams[\"skip_n_eras\"])\n    model = LGBMRegressor(**hparams, force_row_wise=True, device=\"gpu\")\n    model.fit(x, y[\"target\"])\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:23.441170Z","iopub.execute_input":"2024-10-04T04:54:23.441528Z","iopub.status.idle":"2024-10-04T04:54:23.452622Z","shell.execute_reply.started":"2024-10-04T04:54:23.441487Z","shell.execute_reply":"2024-10-04T04:54:23.451525Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"PROD_MODEL_NAME = \"autoenc_wa\" #\"WISIGERNO_WITH60\"\nmlflow.set_experiment(experiment_id=get_or_create_experiment(PROD_MODEL_NAME))","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:23.455402Z","iopub.execute_input":"2024-10-04T04:54:23.455829Z","iopub.status.idle":"2024-10-04T04:54:24.060059Z","shell.execute_reply.started":"2024-10-04T04:54:23.455795Z","shell.execute_reply":"2024-10-04T04:54:24.059119Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"MAIN_TARGET = \"target_cyrusd_20\"\nassert MAIN_TARGET in targets","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.061309Z","iopub.execute_input":"2024-10-04T04:54:24.061719Z","iopub.status.idle":"2024-10-04T04:54:24.065902Z","shell.execute_reply.started":"2024-10-04T04:54:24.061669Z","shell.execute_reply":"2024-10-04T04:54:24.064987Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cfg = {\n    \"model_name\": \"lightgbm\",\n    \"data_version\": DATA_VERSION,\n    \"main_target\": MAIN_TARGET,\n    \"feature_set\": FEATURE_SET,\n}","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.067049Z","iopub.execute_input":"2024-10-04T04:54:24.067408Z","iopub.status.idle":"2024-10-04T04:54:24.077577Z","shell.execute_reply.started":"2024-10-04T04:54:24.067365Z","shell.execute_reply":"2024-10-04T04:54:24.076729Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## (1/4) Tuning Base Models on Main Target","metadata":{}},{"cell_type":"code","source":"# hparams = {\n#     \"skip_n_eras\": [200, 300, 400],\n#     \"n_estimators\": [15000],#10000, 15000, 20000],\n#     \"max_depth\": [5],\n#     \"num_leaves\": [21],\n#     \"learning_rate\": [0.01],\n#     \"colsample_bytree\": [0.1],\n#     \"min_child_samples\": [200],\n# }","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.078642Z","iopub.execute_input":"2024-10-04T04:54:24.078971Z","iopub.status.idle":"2024-10-04T04:54:24.088534Z","shell.execute_reply.started":"2024-10-04T04:54:24.078939Z","shell.execute_reply":"2024-10-04T04:54:24.087687Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# with mlflow.start_run(**get_run_arg(PROD_MODEL_NAME, \"tuning_base\"), tags=cfg):\n#     for grid in ParameterGrid(hparams):\n#         x_train_tune, x_val = split_train_test(x_train)\n#         y_train_tune, y_val = split_train_test(y_train)\n#         model, preds, metrics = fit_predict_eval_lightgbm(x_train_tune, y_train_tune, x_val, y_val, grid)\n#         print(\"\\nRUN RESULTS:\")\n#         print(grid)\n#         print(metrics)\n#         with mlflow.start_run(tags={**cfg, \"stage\": \"tuning\"}, nested=True):\n#             mlflow.log_params(grid)\n#             mlflow.log_param(\"train_eras\", get_era_range(drop_n_eras(y_train, grid[\"skip_n_eras\"])))\n#             mlflow.log_param(\"test_eras\", get_era_range(y_val))\n#             mlflow.log_metrics(metrics)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.089794Z","iopub.execute_input":"2024-10-04T04:54:24.090421Z","iopub.status.idle":"2024-10-04T04:54:24.098508Z","shell.execute_reply.started":"2024-10-04T04:54:24.090379Z","shell.execute_reply":"2024-10-04T04:54:24.097725Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## (2/4) Training Base Models on All Targets + Predictions","metadata":{}},{"cell_type":"code","source":"target_names = [t.split(\"_\")[1] for t in targets]\ntarget_names","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.099866Z","iopub.execute_input":"2024-10-04T04:54:24.100202Z","iopub.status.idle":"2024-10-04T04:54:24.114007Z","shell.execute_reply.started":"2024-10-04T04:54:24.100171Z","shell.execute_reply":"2024-10-04T04:54:24.113210Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"opt_hparams = {\n    \"skip_n_eras\": 0,\n    \"n_estimators\": 10000,#15000,\n    \"max_depth\": 5,\n    \"num_leaves\": 21,\n    \"learning_rate\": 0.01,\n    \"colsample_bytree\": 0.1,\n    \"min_child_samples\": 200,\n}","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:54:24.116215Z","iopub.execute_input":"2024-10-04T04:54:24.116481Z","iopub.status.idle":"2024-10-04T04:54:24.123522Z","shell.execute_reply.started":"2024-10-04T04:54:24.116452Z","shell.execute_reply":"2024-10-04T04:54:24.122860Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with mlflow.start_run(**get_run_arg(PROD_MODEL_NAME, \"training_base\"), tags=cfg):\n    for target, target_name in zip(targets, target_names):\n        model_name = f\"lgb_{cfg['feature_set']}_{target_name}\"\n        print(f\"Fitting model '{model_name}'\")\n        model = lgb.Booster(model_file=MODELS_DIR / f\"{model_name}.txt\")\n#         model = fit_lightgbm(x_train, y_train.assign(target=y_train[target]), opt_hparams)\n#         model.booster_.save_model(MODELS_DIR / f\"{model_name}.txt\")\n        y_test[f\"pred_{target_name}\"] = model.predict(x_test.drop(columns=[\"era\"]))\n#         with mlflow.start_run(tags={**cfg, \"stage\": \"training\"}, nested=True):\n#             mlflow.log_params(opt_hparams)\n#             mlflow.log_param(\"train_eras\", get_era_range(drop_n_eras(y_train, opt_hparams[\"skip_n_eras\"])))\n#             mlflow.log_param(\"test_eras\", get_era_range(y_test))\n#             mlflow.lightgbm.log_model(model, model_name)\n    y_test.to_csv(os.path.join(FOLDER, \"predictions.csv\"), index=False)\n    mlflow.log_artifact(\"predictions.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-04T04:56:00.915130Z","iopub.execute_input":"2024-10-04T04:56:00.915505Z","iopub.status.idle":"2024-10-04T06:20:40.654330Z","shell.execute_reply.started":"2024-10-04T04:56:00.915473Z","shell.execute_reply":"2024-10-04T06:20:40.653363Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"preds = pd.read_csv(os.path.join(FOLDER, \"predictions.csv\"))\npreds[\"target\"] = preds[MAIN_TARGET].copy()\npreds","metadata":{"execution":{"iopub.status.busy":"2024-10-04T06:20:40.656298Z","iopub.execute_input":"2024-10-04T06:20:40.656763Z","iopub.status.idle":"2024-10-04T06:20:45.322040Z","shell.execute_reply.started":"2024-10-04T06:20:40.656716Z","shell.execute_reply":"2024-10-04T06:20:45.320945Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## (3/4) Evaluating Target Ensembles","metadata":{}},{"cell_type":"code","source":"ensembles = {\n#     \"main_target\": [\"cyrusd\"],\n#     \"all_targets\": target_names,\n#     \"top3prev\": [\"cyrusd\", \"sam\", \"caroline\"],\n    \"top2a\": [\"cyrusd\", \"alpha\"],\n    \"top2b\": [\"cyrusd\", \"bravo\"],\n    #\"top3b\": [\"cyrusd\", \"alpha\", \"bravo\"], <- BEST\n    #\"top3c\": [\"cyrusd\", \"delta\", \"bravo\"],\n    #\"top4\": [\"cyrusd\", \"alpha\", \"charlie\", \"delta\"],#, \"bravo\"],\n    #\"top5\": [\"cyrusd\", \"alpha\", \"charlie\", \"delta\", \"bravo\"],#, \"victor\", \"caroline\", \"echo\"],\n    #\"top7\": [\"cyrusd\", \"alpha\", \"charlie\", \"delta\", \"bravo\", \"victor\", \"caroline\"],#, \"echo\"],\n    #\"top8\": [\"cyrusd\", \"alpha\", \"charlie\", \"delta\", \"bravo\", \"victor\", \"caroline\", \"echo\"],\n    #\"except_alpha_charlie_claudia\": [t for t in target_names if t not in [\"alpha\", \"charlie\", \"claudia\"]],\n}\n# for excluded in target_names:\n#     ensembles[f\"except_{excluded}\"] = [t for t in target_names if t != excluded]\nlen(ensembles)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T07:35:07.482072Z","iopub.execute_input":"2024-10-04T07:35:07.482469Z","iopub.status.idle":"2024-10-04T07:35:07.489744Z","shell.execute_reply.started":"2024-10-04T07:35:07.482433Z","shell.execute_reply":"2024-10-04T07:35:07.488767Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with mlflow.start_run(**get_run_arg(PROD_MODEL_NAME, \"target_ensembling\"), tags=cfg):\n    for name, te in ensembles.items():\n        print(f\"Evaluating ensemble '{name}'\")\n        pred_cols = []\n        for col in preds.columns:\n            if col.startswith(f\"pred_\") and col.split(\"_\")[-1] in te:\n                pred_cols.append(col)\n        ensemble = preds.groupby(\"era\")[pred_cols].rank(pct=True).mean(axis=1)\n        metrics = evaluate_predictions(preds.assign(prediction=ensemble))\n        print(f\"Metrics: {metrics}\")\n        with mlflow.start_run(tags={**cfg, \"stage\": \"ensembling\"}, nested=True):\n            mlflow.log_params(opt_hparams)\n            mlflow.log_param(\"ensemble\", name)\n            mlflow.log_param(\"test_eras\", get_era_range(y_test))\n            mlflow.log_param(\"n_targets\", len(pred_cols))\n            mlflow.log_metrics(metrics)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T07:35:07.623609Z","iopub.execute_input":"2024-10-04T07:35:07.624482Z","iopub.status.idle":"2024-10-04T07:35:23.347068Z","shell.execute_reply.started":"2024-10-04T07:35:07.624442Z","shell.execute_reply":"2024-10-04T07:35:23.346279Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## (4/4) Training Base Models for Production","metadata":{}},{"cell_type":"code","source":"top_ensemble = [\"cyrusd\", \"alpha\", \"bravo\"]\ntargets = [f\"target_{name}_20\" for name in top_ensemble]\nprint(targets)\nlen(targets)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T07:36:16.392351Z","iopub.execute_input":"2024-10-04T07:36:16.392750Z","iopub.status.idle":"2024-10-04T07:36:16.399952Z","shell.execute_reply.started":"2024-10-04T07:36:16.392713Z","shell.execute_reply":"2024-10-04T07:36:16.399014Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"HPARAMS = {\n    \"n_estimators\": 15000,\n    \"max_depth\": 5,\n    \"num_leaves\": 21,\n    \"learning_rate\": 0.01,\n    \"colsample_bytree\": 0.1,\n    \"min_child_samples\": 200,\n}\nSKIP_N_ERAS = 0 # only for RAM reasons (OOM when using all eras with 'medium' features, even though the first half of validation data was dropped as well)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T06:20:45.332975Z","iopub.execute_input":"2024-10-04T06:20:45.333304Z","iopub.status.idle":"2024-10-04T06:20:45.341909Z","shell.execute_reply.started":"2024-10-04T06:20:45.333269Z","shell.execute_reply":"2024-10-04T06:20:45.340942Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_eras = get_era_range(drop_n_eras(y, SKIP_N_ERAS))\ntrain_eras","metadata":{"execution":{"iopub.status.busy":"2024-10-04T06:20:45.343118Z","iopub.execute_input":"2024-10-04T06:20:45.343539Z","iopub.status.idle":"2024-10-04T06:20:48.434574Z","shell.execute_reply.started":"2024-10-04T06:20:45.343505Z","shell.execute_reply":"2024-10-04T06:20:48.433576Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_reduced = drop_n_eras(x, SKIP_N_ERAS).drop(columns=[\"era\"])\ndel x","metadata":{"execution":{"iopub.status.busy":"2024-10-04T06:20:48.435748Z","iopub.execute_input":"2024-10-04T06:20:48.436064Z","iopub.status.idle":"2024-10-04T06:20:54.320476Z","shell.execute_reply.started":"2024-10-04T06:20:48.436031Z","shell.execute_reply":"2024-10-04T06:20:54.319640Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with mlflow.start_run(**get_run_arg(PROD_MODEL_NAME, \"training_prod\"), tags=cfg):\n    for target, target_name in zip(targets, top_ensemble):\n        if target == 'target_cyrusd_20':\n            continue\n        model_name = f\"prod_lgb_{cfg['feature_set']}_{target.lstrip('target_').replace('_v4_', '_')}\"\n        print(f\"Fitting model '{model_name}'\")\n        y_cur = drop_n_eras(y, SKIP_N_ERAS)\n        model = LGBMRegressor(**HPARAMS, force_row_wise=True, device=\"gpu\")\n        model.fit(x_reduced, y_cur[target])\n        model.booster_.save_model(MODELS_DIR / f\"{model_name}.txt\")\n        with mlflow.start_run(tags={**cfg, \"stage\": \"training_prod\"}, nested=True):\n            mlflow.log_params(HPARAMS)\n            mlflow.log_param(\"skip_n_eras\", SKIP_N_ERAS)\n            mlflow.log_param(\"train_eras\", train_eras)\n            mlflow.log_param(\"n_targets\", len(targets))\n            mlflow.log_param(\"target_ensemble\", '-'.join(targets))\n            mlflow.lightgbm.log_model(model, model_name, registered_model_name=model_name)","metadata":{"execution":{"iopub.status.busy":"2024-10-04T07:36:50.857584Z","iopub.execute_input":"2024-10-04T07:36:50.858549Z","iopub.status.idle":"2024-10-04T09:01:00.553633Z","shell.execute_reply.started":"2024-10-04T07:36:50.858504Z","shell.execute_reply":"2024-10-04T09:01:00.552693Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{},"outputs":[],"execution_count":null}]}